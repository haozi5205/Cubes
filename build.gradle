buildscript {
    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.github.rusmonster:sdk-manager-plugin:a35a7b1c2a41a8945fbd69c6187285bd6927a63f'
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    }
}

ext {
    buildProperties = new Properties()
    file("assets/version").withReader { reader ->
        buildProperties.load(reader)
        buildProperties.version = buildProperties.major + "." + buildProperties.minor + "." + buildProperties.point
        println "VERSION: " + buildProperties.version
    }

    build = ""
    hash = ""
    if (hasGit()) {
        build = shell("git rev-list HEAD --count").text.trim()
        hash = shell("git rev-parse HEAD").text.trim()
        println "BUILD:   " + build
        println "HASH:    " + hash
    } else {
        println "Git was not found in path!"
        file("assets/build").delete()
    }

    localProperties = new Properties()
    if (file("build.properties").exists()) {
        file("build.properties").withReader { reader ->
            localProperties.load(reader)
        }
    }
    if (localProperties.ANDROID_KEYSTORE_FILE == null) localProperties.ANDROID_KEYSTORE_FILE = "keystore"
    if (localProperties.ANDROID_KEYSTORE_PASSWORD == null) localProperties.ANDROID_KEYSTORE_PASSWORD = "password"
    if (localProperties.ANDROID_KEYSTORE_KEY_ALIAS == null) localProperties.ANDROID_KEYSTORE_KEY_ALIAS = "android"
    if (localProperties.ANDROID_KEYSTORE_KEY_PASSWORD == null) localProperties.ANDROID_KEYSTORE_KEY_PASSWORD = "password"
    if (localProperties.MAVEN_REPO_PATH == null) localProperties.MAVEN_REPO_PATH = getRootProject().getProjectDir().absolutePath + "/repo/"
    if (localProperties.MAVEN_REPO_USERNAME == null) localProperties.MAVEN_REPO_USERNAME = ""
    if (localProperties.MAVEN_REPO_PASSWORD == null) localProperties.MAVEN_REPO_PASSWORD = ""
}

// Write build file
afterEvaluate {
    if (hash != "") {
        file("assets/build").write("build=" + ext.build + "\nhash=" + ext.hash + "\nisRelease=" + isRelease + "\nbuildDate=" + getDateString() + "\n", 'UTF-8')
    }
}
// Delete build file
project.getGradle().buildFinished {
    file("assets/build").delete()
}

// Set general properties
allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = System.getenv("BUILD_NUMBER")

    ext {
        appName = 'Cubes'
        gdxVersion = '1.9.8'
        androidBuildToolsVersion = '23.0.3'
        androidSdkVersion = 21
        dataVersion = '2.2'
        buildProperties = getRootProject().buildProperties
        build = getRootProject().build
        localProperties = getRootProject().localProperties
        isRelease = false
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "http://ethanjones.me/maven/snapshots/" }
        maven { url "http://ethanjones.me/maven/releases/" }
    }
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile 'com.eclipsesource.minimal-json:minimal-json:0.9.4'
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    }
}

project(":desktop") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    }
}

project(":client") {
    apply plugin: "java"

    dependencies {
        compile project(":desktop")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
    }
}

project(":android") {
    apply plugin: "android-sdk-manager"
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    }
}

project(":html") {
    apply plugin: "gwt"
    apply plugin: "war"
    apply plugin: "maven-publish"

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
    }
}

tasks.eclipse.doLast {
    delete ".project"
}

task travis(dependsOn: ['html:publish']) {

}

String getMavenVersionString() {
    def str = buildProperties.version
    if (!isRelease) {
        str = str + "-SNAPSHOT"
    }
    return str
}

String getMavenRepo() {
    def str = localProperties.MAVEN_REPO_PATH
    if (isRelease) {
        str = str + "releases"
    } else {
        str = str + "snapshots"
    }
    return str
}

String getDateString() {
    TimeZone tz = TimeZone.getTimeZone("UTC");
    java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
    df.setTimeZone(tz);
    return df.format(new Date());
}

boolean hasGit() {
    try {
        def proc = "git rev-parse --short HEAD".execute()
        proc.waitFor()
        return proc.exitValue() == 0
    } catch (Throwable t) {
        return false
    }
}

Process shell(String str) {
    def proc = str.execute()
    proc.waitFor()
    return proc
}